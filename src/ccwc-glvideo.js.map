{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","../ccwc-image-utils/src/webgl/constants.es6","../ccwc-image-utils/src/webgl/filters.es6","../ccwc-image-utils/src/webgl/shaders.es6","../ccwc-image-utils/src/webgl/textures.es6","../ccwc-image-utils/src/webgl/uniforms.es6","src/ccwc-glvideo.es6","src/ccwc-video.es6"],"names":[],"mappings":"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","file":"ccwc-glvideo.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export default {\n    uniforms: {\n        UNIFORM1f: '1f',\n        UNIFORM2f: '2f',\n        UNIFORM3f: '3f',\n        UNIFORM4f: '4f',\n\n        UNIFORM1i: '1i',\n        UNIFORM2i: '2i',\n        UNIFORM3i: '3i',\n        UNIFORM4i: '4i'\n    }\n}","import Constants from './constants.es6';\nimport Shaders from './shaders.es6';\nimport Filters from './filters.es6';\nimport Textures from './textures.es6';\nimport Uniforms from './uniforms.es6';\n\nexport default {\n    /**\n     * create filter from shaders\n     * @param vertexShader\n     * @param fragmentShader\n     * @returns {{vertexShader: *, fragmentShader: *}}\n     */\n    createFilterFromShaders(vertexShader, fragmentShader) {\n        return { vertexShader: vertexShader, fragmentShader: fragmentShader };\n    },\n\n    /**\n     * create a filter from filter name\n     * @param name\n     * @param memory space/variable to pull shader from\n     */\n    createFilterFromName(name, shaderloc) {\n        if (!shaderloc) {\n            shaderloc = Shaders;\n        }\n        if (!shaderloc[name]) {\n            console.log('Shader ', name, 'not found in ', shaderloc, ' using a passthrough shader instead');\n            shaderloc = Shaders;\n            name = 'passthrough';\n        }\n        var vtx = shaderloc[name].vertex;\n        var frg = shaderloc[name].fragment;\n        return this.createFilterFromShaders(vtx, frg);\n    },\n\n    /**\n     * create object for render\n     * @param {Object}params\n     */\n    createRenderObject(params) {\n        var props = {};\n\n        props.gl = params.gl;\n        props.width = props.gl.canvas.width;\n        props.height = props.gl.canvas.height;\n\n        if (params.width) { props.width = params.width; }\n        if (params.height) { props.height = params.height; }\n\n        props.filter = params.filter;\n        props.textures = new Textures(props.width,props.height);\n\n        props.canvas2DHelper = document.createElement('canvas');\n        props.canvas2DHelper.width = props.width;\n        props.canvas2DHelper.height = props.height;\n        props.canvas2DHelperContext = props.canvas2DHelper.getContext('2d');\n\n        props.uniforms = new Uniforms();\n        props.textures = new Textures(props.gl, props.width, props.height);\n\n        if (params.textures) {\n            for (var c = 0; c < params.textures.length; c++) {\n                props.textures.add(params.textures[c].name, params.textures[c].texture, params.textures[c].index, params.textures[c].pixelStore);\n            }\n        }\n\n        if (params.uniforms) {\n            for (var c = 0; c < params.uniforms.length; c++) {\n                props.uniforms.add(params.uniforms[c].name, params.uniforms[c].type, params.uniforms[c].values);\n            }\n        }\n\n        if (params.autorender) {\n            return this.render(props);\n        }\n\n        return props;\n    },\n\n    /**\n     * render WebGL filter on current texture\n     * @param glprops\n     * @param refreshTextureIndices texture refresh indices (optional)\n     * @returns {*}\n     */\n    render(glprops) {\n        if (!glprops.isInitialized) {\n            var vertexShader = glprops.gl.createShader(glprops.gl.VERTEX_SHADER);\n            glprops.gl.shaderSource(vertexShader, glprops.filter.vertexShader);\n            glprops.gl.compileShader(vertexShader);\n\n            var fragmentShader = glprops.gl.createShader(glprops.gl.FRAGMENT_SHADER);\n            glprops.gl.shaderSource(fragmentShader, glprops.filter.fragmentShader);\n            glprops.gl.compileShader(fragmentShader);\n\n            glprops.program = glprops.gl.createProgram();\n            glprops.gl.attachShader(glprops.program, vertexShader);\n            glprops.gl.attachShader(glprops.program, fragmentShader);\n            glprops.gl.linkProgram(glprops.program);\n            glprops.gl.useProgram(glprops.program);\n\n            var positionLocation = glprops.gl.getAttribLocation(glprops.program, 'a_position');\n            var texCoordBuffer = glprops.gl.createBuffer();\n            var rectCoordBuffer = glprops.gl.createBuffer();\n            var texCoords = new Float32Array([0.0,  0.0, 1.0,  0.0, 0.0,  1.0, 0.0,  1.0, 1.0,  0.0, 1.0,  1.0]);\n            var rectCoords = new Float32Array([0, 0, glprops.textures.width, 0, 0, glprops.textures.height, 0,\n                glprops.textures.height, glprops.textures.width, 0, glprops.textures.width, glprops.textures.height]);\n\n            glprops.gl.bindBuffer(glprops.gl.ARRAY_BUFFER, texCoordBuffer);\n            glprops.gl.bufferData(glprops.gl.ARRAY_BUFFER, texCoords, glprops.gl.STATIC_DRAW);\n\n            var texCoordLocation = glprops.gl.getAttribLocation(glprops.program, 'a_texCoord');\n            glprops.gl.enableVertexAttribArray(texCoordLocation);\n            glprops.gl.vertexAttribPointer(texCoordLocation, 2, glprops.gl.FLOAT, false, 0, 0);\n\n            glprops.uniforms.add('u_resolution', Constants.uniforms.UNIFORM2f, [glprops.gl.canvas.width, glprops.gl.canvas.height]);\n            glprops.uniforms.add('f_resolution', Constants.uniforms.UNIFORM2f, [glprops.gl.canvas.width, glprops.gl.canvas.height]);\n\n            glprops.gl.bindBuffer(glprops.gl.ARRAY_BUFFER, rectCoordBuffer);\n            glprops.gl.enableVertexAttribArray(positionLocation);\n            glprops.gl.vertexAttribPointer(positionLocation, 2, glprops.gl.FLOAT, false, 0, 0);\n            glprops.gl.bufferData(glprops.gl.ARRAY_BUFFER, rectCoords, glprops.gl.STATIC_DRAW);\n        }\n\n        glprops.textures.initializeNewTextures(glprops.program);\n        glprops.textures.refreshScene();\n        glprops.uniforms.updateProgram(glprops.gl, glprops.program);\n\n        glprops.gl.drawArrays(glprops.gl.TRIANGLES, 0, 6);\n        glprops.isInitialized = true;\n\n        return glprops;\n    },\n\n    /**\n     * read pixels from GL context\n     * @param glProps\n     */\n    getCanvasPixels(glprops) {\n        var glctx = glprops.gl;\n        if (!glprops.pixelarray || glctx.canvas.width * glctx.canvas.height * 4 !== glprops.pixelarray.length) {\n            glprops.pixelarray = new Uint8Array(glctx.canvas.width * glctx.canvas.height * 4);\n        }\n        glctx.readPixels(0, 0, glctx.canvas.width, glctx.canvas.height, glctx.RGBA, glctx.UNSIGNED_BYTE, glprops.pixelarray);\n        var imgData = glprops.canvas2DHelperContext.createImageData(glctx.canvas.width, glctx.canvas.height);\n        imgData.data.set(new Uint8ClampedArray(glprops.pixelarray));\n        return imgData;\n    }\n};","export default {\n  \"freichen_edge_detection\": {\n    \"fragment\": \"precision mediump float; uniform sampler2D u_image0; varying vec2 v_texCoord; uniform vec2 f_resolution; vec2 texel = vec2(1.0 / f_resolution.x, 1.0 / f_resolution.y); mat3 G[9];  const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 ); const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 ); const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 ); const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 ); const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 ); const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 ); const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 ); const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 ); const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );  void main(void) {      G[0] = g0,     G[1] = g1,     G[2] = g2,     G[3] = g3,     G[4] = g4,     G[5] = g5,     G[6] = g6,     G[7] = g7,     G[8] = g8;      mat3 I;     float cnv[9];     vec3 sampl;      for (float i=0.0; i<3.0; i++) {         for (float j=0.0; j<3.0; j++) {             sampl = texture2D(u_image0, v_texCoord + texel * vec2(i-1.0,j-1.0) ).rgb;             I[int(i)][int(j)] = length(sampl);         }     }      for (int i=0; i<9; i++) {         float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);         cnv[i] = dp3 * dp3;     }      float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);     float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);      gl_FragColor = vec4(vec3(sqrt(M/S)), texture2D( u_image0, v_texCoord ).a ); }\",\n    \"vertex\": \"attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }\"\n  },\n  \"greyscale\": {\n    \"fragment\": \"precision mediump float; varying vec2 v_texCoord;  uniform sampler2D u_image0;  void main(void) {     vec4 px = texture2D(u_image0, v_texCoord);     float avg = (px.r + px.g + px.b)/3.0;     gl_FragColor = vec4(avg, avg, avg, px.a); }\",\n    \"vertex\": \"attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }\"\n  },\n  \"passthrough\": {\n    \"fragment\": \"precision mediump float; uniform sampler2D u_image0; varying vec2 v_texCoord;  void main() {     gl_FragColor = texture2D(u_image0, v_texCoord); }\",\n    \"vertex\": \"attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }\"\n  },\n  \"sepia\": {\n    \"fragment\": \"precision mediump float; varying vec2 v_texCoord;  uniform sampler2D u_image0; uniform vec4 light; uniform vec4 dark; uniform float desat; uniform float toned;  const mat4 coeff = mat4(     0.393, 0.349, 0.272, 1.0,     0.796, 0.686, 0.534, 1.0,     0.189, 0.168, 0.131, 1.0,     0.0, 0.0, 0.0, 1.0 );  void main(void) {     vec4 sourcePixel = texture2D(u_image0, v_texCoord);     gl_FragColor = coeff * sourcePixel; }\",\n    \"vertex\": \"attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }\"\n  },\n  \"sobel_edge_detection\": {\n    \"fragment\": \"precision mediump float; varying vec2 v_texCoord; uniform sampler2D u_image0; uniform vec2 f_resolution;  void main(void) {     float x = 1.0 / f_resolution.x;     float y = 1.0 / f_resolution.y;     vec4 horizEdge = vec4( 0.0 );     horizEdge -= texture2D( u_image0, vec2( v_texCoord.x - x, v_texCoord.y - y ) ) * 1.0;     horizEdge -= texture2D( u_image0, vec2( v_texCoord.x - x, v_texCoord.y     ) ) * 2.0;     horizEdge -= texture2D( u_image0, vec2( v_texCoord.x - x, v_texCoord.y + y ) ) * 1.0;     horizEdge += texture2D( u_image0, vec2( v_texCoord.x + x, v_texCoord.y - y ) ) * 1.0;     horizEdge += texture2D( u_image0, vec2( v_texCoord.x + x, v_texCoord.y     ) ) * 2.0;     horizEdge += texture2D( u_image0, vec2( v_texCoord.x + x, v_texCoord.y + y ) ) * 1.0;     vec4 vertEdge = vec4( 0.0 );     vertEdge -= texture2D( u_image0, vec2( v_texCoord.x - x, v_texCoord.y - y ) ) * 1.0;     vertEdge -= texture2D( u_image0, vec2( v_texCoord.x    , v_texCoord.y - y ) ) * 2.0;     vertEdge -= texture2D( u_image0, vec2( v_texCoord.x + x, v_texCoord.y - y ) ) * 1.0;     vertEdge += texture2D( u_image0, vec2( v_texCoord.x - x, v_texCoord.y + y ) ) * 1.0;     vertEdge += texture2D( u_image0, vec2( v_texCoord.x    , v_texCoord.y + y ) ) * 2.0;     vertEdge += texture2D( u_image0, vec2( v_texCoord.x + x, v_texCoord.y + y ) ) * 1.0;     vec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));      gl_FragColor = vec4( edge, texture2D( u_image0, v_texCoord ).a ); }\",\n    \"vertex\": \"attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }\"\n  }\n}","export default class {\n    /**\n     * c-tor\n     * @param gl\n     * @param width\n     * @param height\n     */\n    constructor(gl, width, height) {\n        /** internal texture array */\n        this._textures = {};\n\n        /** width */\n        this.width = width;\n\n        /** height */\n        this.height = height;\n\n        /** gl context */\n        this.gl = gl;\n\n        /** uninitialized textures */\n        this._unitialized = [];\n\n        /** dirty textures (needs updating) */\n        this._dirty = [];\n\n        /** texture indices */\n        this.textureIndices = [];\n    }\n\n    /**\n     * add a texture\n     * @param {String} name\n     * @param {Object} texture\n     * @param {Integer} glindex\n     * @param {Array} pixelstore\n     */\n    add(name, texture, glindex, pixelstore) {\n        if (!glindex) {\n            glindex = 0;\n            while (this.textureIndices.indexOf(glindex) !== -1) {\n                glindex ++;\n            }\n        }\n\n        if (!pixelstore) {\n            pixelstore = [];\n        }\n        this.textureIndices.push(glindex);\n\n        this._textures[name] = {\n            name: name,\n            glindex: glindex,\n            texture: texture,\n            gltexture: this.gl.createTexture(),\n            initialized: false,\n            pixelStore: pixelstore,\n            dirty: true };\n\n        this._unitialized.push(this._textures[name]);\n    };\n\n    /**\n     * update a uniform\n     * @param name name of texture\n     * @param texture\n     */\n    update(name, texture) {\n        if (texture) {\n            this._textures[name].texture = texture;\n        }\n        this._textures[name].dirty = true;\n        this._dirty.push(this._textures[name]);\n    };\n\n    /**\n     * refresh scene with updated textures\n     */\n    refreshScene() {\n        for (var c = 0; c < this._dirty.length; c++) {\n            this.gl.activeTexture(this.gl['TEXTURE' + this._dirty[c].glindex]);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this._dirty[c].gltexture);\n            this.gl.texSubImage2D(this.gl.TEXTURE_2D, 0, 0, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this._dirty[c].texture);\n        }\n        this._dirty = [];\n    };\n\n    /**\n     * initialize new textures\n     * @param program\n     */\n    initializeNewTextures(program) {\n        if (this._unitialized.length === 0) { return; }\n        var gl = this.gl;\n        for (var c = 0; c < this._unitialized.length; c++) {\n            this._unitialized[c].location = gl.getUniformLocation(program, 'u_image' + this._unitialized[c].glindex);\n            gl.uniform1i(this._unitialized[c].location, this._unitialized[c].glindex);\n            gl.activeTexture(gl['TEXTURE' + this._unitialized[c].glindex]);\n            gl.bindTexture(gl.TEXTURE_2D, this._unitialized[c].gltexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n            for (var d = 0; d < this._unitialized[c].pixelStore.length; d++) {\n                gl.pixelStorei(gl[this._unitialized[c].pixelStore[d].property], this._unitialized[c].pixelStore[d].value);\n            }\n\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._unitialized[c].texture);\n\n            this._unitialized[c].initialized = true;\n            this._unitialized[c].dirty = false;\n        }\n        this._unitialized = [];\n    };\n}","export default class {\n    /**\n     * c-tor\n     */\n    constructor() {\n        /**\n         * internal mapping of uniforms\n         * @type {{}}\n         * @private\n         */\n        this._uniforms = {};\n    }\n\n    /**\n     * add a uniform\n     * @param type type of uniform (1f, 2f, 3f, 4f, 1i, 2i, 3i, 4u\n     */\n    add(name, type, values) {\n        this._uniforms[name] = { name: name, type: type, values: values, dirty: true };\n    };\n\n    /**\n     * update a uniform\n     * @param type type of uniform (1f, 2f, 3f, 4f, 1i, 2i, 3i, 4u\n     */\n    update(name, values) {\n        this._uniforms[name].values = values;\n        this._uniforms[name].dirty = true;\n    };\n\n\n    /**\n     * update uniforms on GL context and program\n     * @param gl WebGL context\n     * @param program\n     */\n    updateProgram(gl, program) {\n        for (var c in this._uniforms) {\n            if (this._uniforms[c].dirty) {\n                var u = gl.getUniformLocation(program, this._uniforms[c].name);\n                switch (this._uniforms[c].type) {\n                    case '1f':\n                        gl.uniform1f(u, this._uniforms[c].values[0]);\n                        break;\n\n                    case '2f':\n                        gl.uniform2f(u, this._uniforms[c].values[0], this._uniforms[c].values[1]);\n                        break;\n\n                    case '3f':\n                        gl.uniform3f(u, this._uniforms[c].values[0], this._uniforms[c].values[1], this._uniforms[c].values[2]);\n                        break;\n\n                    case '4f':\n                        gl.uniform4f(u, this._uniforms[c].values[0], this._uniforms[c].values[1], this._uniforms[c].values[2], this._uniforms[c].values[3]);\n                        break;\n\n                    case '1i':\n                        gl.uniform1i(u, this._uniforms[c].values[0]);\n                        break;\n\n                    case '2i':\n                        gl.uniform2i(u, this._uniforms[c].values[0], this._uniforms[c].values[1]);\n                        break;\n\n                    case '3i':\n                        gl.uniform3i(u, this._.uniforms[c].values[0], this._uniforms[c].values[1], this._uniforms[c].values[2]);\n                        break;\n\n                    case '4i':\n                        gl.uniformif(u, this._uniforms[c].values[0], this._uniforms[c].values[1], this._uniforms[c].values[2], this._uniforms[c].values[3]);\n                        break;\n                }\n            }\n        }\n    }\n}","import CCWCVideo from './ccwc-video.es6';\nimport Filters from '../node_modules/ccwc-image-utils/src/webgl/filters.es6';\nimport Shaders from '../node_modules/ccwc-image-utils/src/webgl/shaders.es6';\n\nexport default class extends CCWCVideo {\n    /**\n     * initialize default class properties\n     * @private\n     */\n    setProperties() {\n        super.setProperties();\n\n        /**\n         * When the texture read (_glReadFlipCorrection) is true, this makes the display go upside down, correct the canvas by inverse scaling in the vertical\n         * @type {Boolean}\n         * @default false\n         */\n        this._flipCanvas = false;\n\n        /**\n         * use webgl\n         * @type {boolean}\n         * @private\n         */\n        this._useWebGL = false;\n    };\n\n    onResize() {\n        super.onResize();\n        if (this._useWebGL && this.webglProperties.renderobj) {\n            this.webglProperties.renderobj.textures.width = this.videoScaledWidth;\n            this.webglProperties.renderobj.textures.height = this.videoScaledHeight;\n            this.canvasctx.viewport(0, 0, this.canvasElement.width, this.canvasElement.height);\n        }\n    }\n\n    /**\n     * on video playing handler\n     */\n    onPlaying() {\n        super.onPlaying();\n        if (this._useWebGL) {\n            this.webglProperties.renderobj = this.webglProperties.setupHandler.apply(this, [this.webglProperties]);\n            var event = new CustomEvent('webglsetup', { detail: { properties: this.webglProperties } });\n            this.dispatchEvent(event);\n        }\n    };\n\n    /**\n     * get image data for current frame\n     * @param {boolean} mode data mode (binary or base64)\n     * @param {boolean} noredraw do not perform redraw (can be wasteful)\n     * @return {object} image data\n     */\n    getCurrentFrameData(mode, noredraw) {\n        var data, filtered;\n        if (!mode) {\n            mode = this.frameDataMode;\n        }\n        if (!noredraw) {\n            if (this._useWebGL) {\n                this.webglProperties.renderobj.textures.update('video');\n                this.webglProperties.renderHandler(this.webglProperties.renderobj);\n            } else {\n                this.canvasctx.drawImage(\n                    this.videoElement, 0, 0,\n                    this.videoScaledWidth * this.canvasScale,\n                    this.videoScaledHeight * this.canvasScale);\n\n                if (this.canvasFilter) {\n                    filtered = this.canvasctx.getImageData(0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale);\n                    this.canvasctx.putImageData(this.canvasFilter(filtered), 0, 0, 0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale );\n                }\n            }\n\n        }\n\n        switch (mode) {\n            /*case 'binary':\n                var base64Data = data.replace('data:image/png;base64', '');\n                var binaryData = new Buffer(base64Data, 'base64');\n                data = binaryData;\n                break;*/\n\n            case 'imagedataurl':\n                data = this.canvasElement.toDataURL('image/png');\n                break;\n\n            case 'imagedata':\n                if (!filtered) {\n                    if (this._useWebGL) {\n                        data = Filters.getCanvasPixels(this.webglProperties.renderobj);\n                    } else {\n                        data = this.canvasctx.getImageData(0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale);\n                    }\n                } else {\n                    // save some CPU cycles if we already did this\n                    data = filtered;\n                }\n                break;\n        }\n\n        return data;\n    };\n\n    /**\n     * setup handler for WebGL Scene\n     * @param {Object} props webgl properties\n     * @return renderobj\n     */\n    webglSetupHandler(props) {\n        var filter;\n        if (props.vertexShader && props.fragmentShader) {\n            filter = Filters.createFilterFromShaders(props.vertexShader, props.fragmentShader)\n        } else {\n            filter = Filters.createFilterFromName(props.filter, props.filterLibrary);\n        }\n\n        props.textures.push({\n            name: 'video',\n            texture: this.videoElement,\n            pixelStore: [{ property: 'UNPACK_FLIP_Y_WEBGL', value: this.webglProperties.flipTextureY }],\n            index: 0});\n\n        return Filters.createRenderObject({\n            gl: this.canvasctx,\n            filter: filter,\n            textures: props.textures\n        });\n    };\n\n    /**\n     * render handler for WebGL Scene\n     * @param renderobj WebGL render properties\n     */\n    webglRenderHandler(renderobj) {\n        Filters.render(renderobj);\n    };\n\n    /**\n     * parse attributes on element\n     * @private\n     */\n    parseAttributes() {\n        super.parseAttributes();\n        if (this.hasAttribute('useWebGL')) {\n            this._useWebGL = true;\n            var props = this.getAttribute('useWebGL');\n            if (props) {\n                props = JSON.parse(props);\n                if (props.flipTextureY) {\n                    this.webglProperties.flipTextureY = props.flipTextureY;\n                }\n                if (props.filter) {\n                    this.webglProperties.filter = props.filter;\n                }\n            }\n        }\n\n        if (this.hasAttribute('flipCanvas')) {\n            this._flipCanvas = true;\n        }\n    };\n\n    /**\n     * element created callback\n     * @private\n     */\n    createdCallback() {\n        this.webglProperties = {\n            flipTextureY: false,\n            filterLibrary: Shaders,\n            setupHandler: this.webglSetupHandler,\n            renderHandler: this.webglRenderHandler,\n            filter: 'passthrough',\n            textures: []\n        };\n\n        super.createdCallback();\n    };\n}","/**\n * CCWCVideo supports both video files and camera feeds\n * Blit your video to a canvas, get frame data, scale the frame/canvas output, and render video to an external canvas of your choosing\n */\nexport default class extends HTMLElement {\n\n    /**\n     * initialize default class properties\n     * @private\n     */\n    setProperties() {\n        /**\n         * video source file or stream\n         * @type {string}\n         * @private\n         */\n        this._source = '';\n\n        /**\n         * use webgl\n         * @type {boolean}\n         * @private\n         */\n        //this._useWebGL = false;\n\n        /**\n         * use camera\n         * @type {boolean}\n         * @private\n         */\n        this._useCamera = false;\n\n        /**\n         * is component ready\n         * @type {boolean}\n         */\n        this.isReady = false;\n\n        /**\n         * is video playing\n         * @type {boolean}\n         */\n        this.isPlaying = false;\n\n        /**\n         * width of scaled video\n         * @type {int}\n         */\n        this.videoScaledWidth = 0;\n\n        /**\n         * height of scaled video\n         * @type {int}\n         */\n        this.videoScaledHeight = 0;\n\n        /**\n         * what type of data comes back with frame data event\n         * @type {string}\n         * @default imagedataurl\n         */\n        this.frameDataMode = 'none';\n\n        /**\n         * determines whether to use the canvas element for display instead of the video element\n         * @type {boolean}\n         * @default false\n         */\n        this.useCanvasForDisplay = false;\n\n        /**\n         * canvas filter function (manipulate pixels)\n         * @type {method}\n         * @default 0 ms\n         */\n        this.canvasFilter = null;\n\n        /**\n         * refresh interval when using the canvas for display\n         * @type {int}\n         * @default 0 ms\n         */\n        this.canvasRefreshInterval = 0;\n\n        /**\n         * video element\n         * @type {HTMLElement}\n         * @private\n         */\n        this.videoElement = null;\n\n        /**\n         * camera sources list\n         * @type {Array}\n         */\n        this.cameraSources = [];\n\n        /**\n         * canvas element\n         * @type {Canvas}\n         * @private\n         */\n        this.canvasElement = null;\n\n        /**\n         * component shadow root\n         * @type {ShadowRoot}\n         * @private\n         */\n        this.root = null;\n\n        /**\n         * interval timer to draw frame redraws\n         * @type {int}\n         * @private\n         */\n        this.tick = null;\n\n        /**\n         * canvas context\n         * @type {CanvasContext}\n         * @private\n         */\n        this.canvasctx = null;\n\n        /**\n         * has the canvas context been overridden from the outside?\n         * @type {boolean}\n         * @private\n         */\n        this._canvasOverride = false;\n\n        /**\n         * width of component\n         * @type {int}\n         * @default 0\n         */\n        this.width = 0;\n\n        /**\n         * height of component\n         * @type {int}\n         * @default 0\n         */\n        this.height = 0;\n\n        /**\n         * left offset for letterbox of video\n         * @type {int}\n         * @default 0\n         */\n        this.letterBoxLeft = 0;\n\n        /**\n         * top offset for letterbox of video\n         * @type {int}\n         * @default 0\n         */\n        this.letterBoxTop = 0;\n\n        /**\n         * aspect ratio of video\n         * @type {number}\n         */\n        this.aspectRatio = 0;\n\n        /**\n         * render scale for canvas frame data\n         * best used when grabbing frame data at a different size than the shown video\n         * @attribute canvasScale\n         * @type {float}\n         * @default 1.0\n         */\n        this.canvasScale = 1.0;\n    }\n\n    /**\n     * on video playing handler\n     */\n    onPlaying() {\n        this.isPlaying = true;\n        var event = new CustomEvent('videoplaying', {\n            detail: {\n                source: this.source,\n                videoElement: this.videoElement,\n                videoWidth: this.videoScaledWidth,\n                videoHeight: this.videoScaledHeight,\n                width: this.width,\n                height: this.height } });\n        this.dispatchEvent(event);\n\n        this.canvasElement.width = this.videoScaledWidth * this.canvasScale;\n        this.canvasElement.height = this.videoScaledHeight * this.canvasScale;\n\n        var ctxstring = this._useWebGL ? 'webgl' : '2d';\n        if (!this._canvasOverride) {\n            this.canvasctx = this.canvasElement.getContext(ctxstring);\n        }\n    }\n\n    /**\n     * update canvas dimensions when resized\n     * @private\n     */\n    onResize() {\n        if (this.offsetWidth === 0 || this.offsetHeight === 0) {\n            return;\n        }\n        // set size properties based on component height\n        this.width = this.offsetWidth;\n        this.height = this.offsetHeight;\n\n        if (this.videoElement.videoWidth > 0 && this.videoElement.videoHeight > 0) {\n            this.aspectRatio = this.videoElement.videoWidth / this.videoElement.videoHeight;\n        }\n\n        this.videoScaledWidth = this.width;\n        this.videoScaledHeight = this.height;\n\n        // calculate letterbox borders\n        var componentAspectRatio = this.width/this.height;\n        if (componentAspectRatio < this.aspectRatio) {\n            this.videoScaledHeight = this.width / this.aspectRatio;\n            this.letterBoxTop = this.height/2 - this.videoScaledHeight/2;\n            this.letterBoxLeft = 0;\n        } else if (componentAspectRatio > this.aspectRatio) {\n            this.videoScaledWidth = this.height * this.aspectRatio;\n            this.letterBoxLeft = this.width/2 - this.videoScaledWidth/2;\n            this.letterBoxTop = 0;\n        } else {\n            this.letterBoxTop = 0;\n            this.letterBoxLeft = 0;\n        }\n\n        // set video/canvas to component size\n        this.videoElement.setAttribute('width', this.videoScaledWidth);\n        this.videoElement.setAttribute('height', this.videoScaledHeight);\n        this.canvasElement.setAttribute('width', this.videoScaledWidth);\n        this.canvasElement.setAttribute('height', this.videoScaledHeight);\n        this.videoElement.style.top = this.letterBoxTop + 'px';\n        this.videoElement.style.left = this.letterBoxLeft + 'px';\n        this.canvasElement.style.top = this.letterBoxTop + 'px';\n        this.canvasElement.style.left = this.letterBoxLeft + 'px';\n    };\n\n    /**\n     * set video source\n     * @param {string | int} src video source uri\n     */\n    set source(src) {\n        if (!src) { return; }\n        this._source = src;\n\n        if (this._useCamera && this.cameraSources.length === 0) {\n            this.refreshCameraSources();\n            return;\n        }\n\n        if (this._useCamera || parseInt(src) === src) {\n            this.setCameraSourceByIndex(src);\n        } else if (this._useCamera) {\n            this.setCameraSourceByID(src);\n        } else {\n            this.videoElement.src = src;\n        }\n    };\n\n    /**\n     * get video source\n     * @return {string | int} src video source uri\n     */\n    get source() {\n        return this._source;\n    };\n\n    /**\n     * get canvas context for drawing into it\n     * @return {object} context canvas context\n     */\n    get canvasContext() {\n        return this.canvasctx;\n    };\n\n    /**\n     * get canvas context for drawing into it\n     * @param {object} context canvas context\n     */\n    set canvasContext(context) {\n        this.canvasctx = context;\n        this._canvasOverride = true;\n    };\n\n    /**\n     * get image data for current frame\n     * @param {boolean} mode data mode (binary or base64)\n     * @param {boolean} noredraw do not perform redraw (can be wasteful)\n     * @return {object} image data\n     */\n    getCurrentFrameData(mode, noredraw) {\n        var data, filtered;\n        if (!mode) {\n            mode = this.frameDataMode;\n        }\n        if (!noredraw) {\n            if (this._useWebGL) {\n                this.webglProperties.renderobj.textures.update('video');\n                this.webglProperties.renderHandler(this.webglProperties.renderobj);\n            } else {\n                this.canvasctx.drawImage(\n                    this.videoElement, 0, 0,\n                    this.videoScaledWidth * this.canvasScale,\n                    this.videoScaledHeight * this.canvasScale);\n\n                if (this.canvasFilter) {\n                    filtered = this.canvasctx.getImageData(0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale);\n                    this.canvasctx.putImageData(this.canvasFilter(filtered), 0, 0, 0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale );\n                }\n            }\n\n        }\n\n        switch (mode) {\n            /*case 'binary':\n                var base64Data = data.replace('data:image/png;base64', '');\n                var binaryData = new Buffer(base64Data, 'base64');\n                data = binaryData;\n                break;*/\n\n            case 'imagedataurl':\n                data = this.canvasElement.toDataURL('image/png');\n                break;\n\n            case 'imagedata':\n                if (!filtered) {\n                    //if (this._useWebGL) {\n                      //  data = ccwc.image.webgl.filter.getCanvasPixels(this.webglProperties.renderobj);\n                    //} else {\n                        data = this.canvasctx.getImageData(0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale);\n                    //}\n                } else {\n                    // save some CPU cycles if we already did this\n                    data = filtered;\n                }\n                break;\n        }\n\n        return data;\n    };\n\n    /**\n     * set camera source by index\n     * @param {int} index\n     */\n    setCameraSourceByIndex(index) {\n        if (!index || index >= this.cameraSources.length) { console.log(\"Video Source Index does not exist\"); return; }\n        this.setCameraSourceByID(this.cameraSources[index].id);\n    };\n\n    /**\n     * set camera source by id\n     * @param {String} id\n     */\n    setCameraSourceByID(id) {\n        navigator.webkitGetUserMedia(\n            { video: {optional: [{sourceId: id }]}},\n            this.onCameraStream.bind(this),\n            function() {}\n        );\n    };\n\n    /**\n     * refresh camera sources\n     */\n    refreshCameraSources() {\n        this.cameraSources = [];\n        MediaStreamTrack.getSources( sources => {\n            this.onCameraSources(sources);\n        });\n    };\n\n    /**\n     * on camera video source stream\n     * @param stream\n     * @private\n     */\n    onCameraStream(stream) {\n        this.videoElement.src = URL.createObjectURL(stream);\n        this.videoElement.onloadedmetadata = e => {\n            this.onResize();\n        };\n    };\n\n    /**\n     * on camera sources callback\n     * @param {array} sources found\n     * @private\n     */\n    onCameraSources(sources) {\n        var storageIndex = 0;\n        for (var i=0; i < sources.length; i++) {\n            if (sources[i].kind == 'video') {\n                var label = sources[i].label;\n                if (label == \"\") { label = \"video \" + Number(storageIndex+1); }\n                sources[storageIndex] = sources[i].id;\n                this.cameraSources.push({ label: label, id: sources[i].id });\n                storageIndex++;\n            }\n        }\n\n        var event = new CustomEvent('camerasfound', { detail: { cameras: this.cameraSources } });\n        this.dispatchEvent(event);\n        if (this._source) { this.source = this._source; }\n    };\n\n    /**\n     * parse attributes on element\n     * @private\n     */\n    parseAttributes() {\n        if (this.hasAttribute('useCamera') || this.hasAttribute('usecamera')) {\n            this._useCamera = true;\n        } else {\n            this._useCamera = false;\n        }\n\n        if (this.hasAttribute('src')) {\n            this._source = this.getAttribute('src');\n        }\n\n        if (this.hasAttribute('useCanvasForDisplay')) {\n            this.useCanvasForDisplay = true;\n        } else {\n            this.useCanvasForDisplay = false;\n        }\n\n        if (this.hasAttribute('frameDataMode')) {\n            this.frameDataMode = this.getAttribute('frameDataMode');\n        }\n\n        if (this.hasAttribute('canvasRefreshInterval')) {\n            this.canvasRefreshInterval = parseInt(this.getAttribute('canvasRefreshInterval'));\n        }\n\n        if (this.hasAttribute('canvasScale')) {\n            this.canvasScale = parseFloat(this.getAttribute('canvasScale'));\n        }\n\n        if (this.canvasRefreshInterval === 0 && this.useCanvasForDisplay) {\n            console.log('Warning: Using canvas for display, but the canvas refresh interval is not set or set to 0. Setting refresh interval to 250ms.');\n            this.canvasRefreshInterval = 250;\n        }\n    };\n\n    /**\n     * element created callback\n     * @private\n     */\n    createdCallback() {\n        this.setProperties();\n        this.parseAttributes();\n    };\n\n    /**\n     * element attached callback\n     * @private\n     */\n    attachedCallback() {\n        let template = this.owner.querySelector(\"template\");\n        let clone = template.content.cloneNode(true);\n        this.root = this.createShadowRoot();\n        this.root.appendChild(clone);\n\n        window.addEventListener('HTMLImportsLoaded', e => { this.onResize(); });\n        window.addEventListener('resize', e => { this.onResize(); });\n\n        this.videoElement = this.root.querySelector('#vid');\n        this.videoElement.addEventListener('play', e => this.onPlaying(e));\n        this.canvasElement = this.root.querySelector('#canvas');\n\n        if (this._flipCanvas) {\n            this.canvasElement.style.transform = 'scale(1, -1)';\n        }\n        this.videoElement.onloadedmetadata = e => {\n            this.onResize();\n        };\n\n        this.source = this._source;\n        if (this.useCanvasForDisplay) {\n            this.videoElement.style.display = 'none';\n        } else {\n            this.canvasElement.style.display = 'none';\n        }\n\n        if (this.canvasRefreshInterval > 0) {\n            this.tick = setInterval(() => {\n                if (this.width === 0 || this.height === 0) { return; }\n                if (!this.isPlaying) { return; }\n                var event = new CustomEvent('frameupdate', { detail: {\n                    framedata: this.getCurrentFrameData(),\n                    canvascontext: this.canvasctx,\n                    videoWidth: this.videoScaledWidth * this.canvasScale,\n                    videoHeight: this.videoScaledHeight * this.canvasScale,\n                    videoLeft: this.letterBoxLeft * this.canvasScale,\n                    videoTop: this.letterBoxTop * this.canvasScale,\n                    width: this.width * this.canvasScale,\n                    height: this.height * this.canvasScale }});\n\n                this.dispatchEvent(event);\n            }, this.canvasRefreshInterval);\n        }\n\n        this.isReady = true;\n        var event = new CustomEvent('ready');\n        this.dispatchEvent(event);\n    };\n\n    /**\n     * element detached callback\n     * @private\n     */\n    detachedCallback() {};\n\n\n    /**\n     * attributeChangedCallback\n     * @private\n     * @param {String} attr attribute changed\n     * @param {*} oldVal old value\n     * @param {*} newVal new value\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {};\n}"]}