{"version":3,"sources":["ccwc-videoplayer.es6"],"names":[],"mappings":"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","file":"ccwc-videoplayer.js","sourcesContent":["class CCWCVideoPlayer extends HTMLElement {\n    constructor() {\n        super();\n\n        /**\n         * video source file or stream\n         * @attribute source\n         * @type string\n         */\n        this.source = \"\";\n\n        /**\n         * determines whether to use the canvas element for display instead of the video element\n         * @attribute useCanvasForDisplay\n         * @type boolean\n         * @default false\n         */\n        this.useCanvasForDisplay = false;\n\n        /**\n         * refresh interval when using the canvas for display\n         * @attribute canvasRefreshInterval\n         * @type int\n         * @default 250 ms\n         */\n        this.canvasRefreshInterval = 250;\n\n        /**\n         * width of component\n         * @attribute width\n         * @type int\n         * @default 0\n         */\n        this.width = 0;\n\n        /**\n         * height of component\n         * @attribute height\n         * @type int\n         * @default 0\n         */\n        this.height = 0;\n\n        /**\n         * left offset for letterbox of video\n         * @attribute letterBoxLeft\n         * @type int\n         * @default 0\n         */\n        this.letterBoxLeft = 0;\n\n        /**\n         * top offset for letterbox of video\n         * @attribute letterBoxTop\n         * @type int\n         * @default 0\n         */\n        this.letterBoxTop = 0;\n\n        /**\n         * aspect ratio of video\n         * @attribute aspectRatio\n         * @type float\n         * @default 0\n         */\n        this.aspectRatio = 0;\n\n        /**\n         * horizontal scale of video compared to original format\n         * @attribute scaleX\n         * @type float\n         * @default 0\n         */\n        this.scaleX = 0;\n\n        /**\n         * vertical scale of video compared to original format\n         * @attribute scaleY\n         * @type float\n         * @default 0\n         */\n        this.scaleY = 0;\n    }\n\n    /**\n     * update canvas dimensions when resized\n     *\n     * @method: onResize\n     */\n    onResize() {\n        // set size properties based on component height\n        this.width = this.root.offsetWidth;\n        this.height = this.root.offsetHeight;\n\n        // set video to component size\n        this.videoElement.setAttribute(\"width\", this.width);\n        this.videoElement.setAttribute(\"height\", this.height);\n\n        // calculate scale values for real video vs component size\n        this.scaleX = this.width / this.videoElement.videoWidth;\n        this.scaleY = this.height / this.videoElement.videoHeight;\n\n        // calculate aspect ratio\n        this.aspectRatio = this.videoElement.videoWidth / this.videoElement.videoHeight;\n\n        // calculate letterbox borders\n        var componentAspectRatio = this.width/this.height;\n        if (componentAspectRatio < this.aspectRatio) {\n            var newVideoHeight = this.width / this.aspectRatio;\n            this.letterBoxTop = this.height - newVideoHeight;\n            this.letterBoxLeft = 0;\n        } else if (componentAspectRatio > this.aspectRatio) {\n            var newVideoWidth = this.height / this.aspectRatio;\n            this.letterBoxLeft = this.width - newVideoWidth;\n            this.letterBoxTop = 0;\n        } else {\n            this.letterBoxTop = 0;\n            this.letterBoxLeft = 0;\n        }\n    };\n\n\n    /**\n     * get canvas context\n     * @method get canvas context for drawing into it\n     * @return {object} canvas context\n     */\n    setSource(src) {\n        if (src != \"\") {\n            this.source = src;\n            this.videoElement.src = src;\n        }\n    };\n\n    /**\n     * get canvas context\n     * @method get canvas context for drawing into it\n     * @return {object} canvas context\n     */\n    getCanvasContext() {\n        return this.canvasctx;\n    };\n\n    /**\n     * get image data for current frame\n     *\n     * @method getCurrentFrameData\n     * @param {boolean} data mode (binary or base64)\n     * @param {boolean} do not perform redraw (can be wasteful)\n     * @return {object} image data\n     */\n    getCurrentFrameData(mode, noredraw) {\n        if (!mode) {\n            mode = \"binary\";\n        }\n        if (!noredraw) {\n            this.canvasElement.setAttribute('width', this.width);\n            this.canvasElement.setAttribute('height', this.height);\n            this.canvasctx.drawImage(this.videoElement, 0, 0);\n        }\n        var data = this.canvasElement.toDataURL(\"image/png\");\n        if (mode == \"binary\") {\n            var base64Data = data.replace('data:image/png;base64', \"\");\n            var binaryData = new Buffer(base64Data, 'base64');\n            data = binaryData;\n        }\n        // todo: non-binary mode for assigning data to image elements for example\n        return data;\n    };\n\n    /**\n     * save current frame to file\n     *\n     * @method saveCurrentFrameToFile\n     * @param file path\n     * @param image type\n     */\n    saveCurrentFrameToFile(pth) {\n        var fs = require('fs');\n        if (!fs) {\n            throw new Error('This method uses Node.js functionality, and you are not running within Node.js');\n        }\n        var data = this.getCurrentFrameData().toString('binary');\n        fs.writeFileSync(pth, data, 'binary');\n    }\n\n\n    // Fires when an instance of the element is created.\n    createdCallback() {};\n\n    // Fires when an instance was inserted into the document.\n    attachedCallback() {\n        let template = this.owner.querySelector(\"template\");\n        let clone = template.content.cloneNode(true);\n        this.root = this.createShadowRoot();\n        this.root.appendChild(clone);\n\n        this.videoElement = this.root.querySelector('#vid');\n        this.canvasElement = this.root.querySelector('#canvas');\n\n        this.onResize();\n        this.videoElement.onloadedmetadata = e => {\n            this.onResize();\n        };\n\n        if (this.useCanvasForDisplay) {\n            this.videoElement.style.display = 'none';\n            this.tick = setInterval(() => {\n                this.canvasctx.drawImage(this.videoElement, 0, 0);\n                var event = new Event('camera-frame-update', { framedata: this.getCurrentFrameData(null, true) });\n                this.root.dispatchEvent(event);\n            }, this.canvasRefreshInterval);\n        } else {\n            this.canvasElement.style.display = 'none';\n        }\n        this.canvasctx = this.canvasElement.getContext(\"2d\");\n\n        if (this.hasAttribute('src')) {\n            this.source = this.getAttribute('src');\n            this.setSource(this.source);\n        }\n    };\n\n    // Fires when an instance was removed from the document.\n    detachedCallback() {};\n\n\n    // Fires when an attribute was added, removed, or updated.\n    attributeChangedCallback(attr, oldVal, newVal) {\n        console.log(attr, oldVal)\n    };\n\n}\n\nCCWCVideoPlayer.prototype.owner = (document._currentScript || document.currentScript).ownerDocument;\ndocument.registerElement('ccwc-videoplayer', CCWCVideoPlayer);"]}