{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/ccwc-video.es6"],"names":[],"mappings":"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","file":"ccwc-video.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * CCWCVideo supports both video files and camera feeds\n * Blit your video to a canvas, get frame data, scale the frame/canvas output, and render video to an external canvas of your choosing\n */\nexport default class extends HTMLElement {\n\n    /**\n     * initialize default class properties\n     * @private\n     */\n    setProperties() {\n        /**\n         * video source file or stream\n         * @type {string}\n         * @private\n         */\n        this._source = '';\n\n        /**\n         * use webgl\n         * @type {boolean}\n         * @private\n         */\n        //this._useWebGL = false;\n\n        /**\n         * use camera\n         * @type {boolean}\n         * @private\n         */\n        this._useCamera = false;\n\n        /**\n         * is component ready\n         * @type {boolean}\n         */\n        this.isReady = false;\n\n        /**\n         * is video playing\n         * @type {boolean}\n         */\n        this.isPlaying = false;\n\n        /**\n         * width of scaled video\n         * @type {int}\n         */\n        this.videoScaledWidth = 0;\n\n        /**\n         * height of scaled video\n         * @type {int}\n         */\n        this.videoScaledHeight = 0;\n\n        /**\n         * how the video is scaled\n         * @type {string}\n         * @default letterbox\n         */\n        this.videoScaleMode = 'contain';\n\n        /**\n         * what type of data comes back with frame data event\n         * @type {string}\n         * @default imagedataurl\n         */\n        this.frameDataMode = 'none';\n\n        /**\n         * determines whether to use the canvas element for display instead of the video element\n         * @type {boolean}\n         * @default false\n         */\n        this.useCanvasForDisplay = false;\n\n        /**\n         * canvas filter function (manipulate pixels)\n         * @type {method}\n         * @default 0 ms\n         */\n        this.canvasFilter = null;\n\n        /**\n         * refresh interval when using the canvas for display\n         * @type {int}\n         * @default 0 ms\n         */\n        this.canvasRefreshInterval = 0;\n\n        /**\n         * video element\n         * @type {HTMLElement}\n         * @private\n         */\n        this.videoElement = null;\n\n        /**\n         * camera sources list\n         * @type {Array}\n         */\n        this.cameraSources = [];\n\n        /**\n         * canvas element\n         * @type {Canvas}\n         * @private\n         */\n        this.canvasElement = null;\n\n        /**\n         * component shadow root\n         * @type {ShadowRoot}\n         * @private\n         */\n        this.root = null;\n\n        /**\n         * interval timer to draw frame redraws\n         * @type {int}\n         * @private\n         */\n        this.tick = null;\n\n        /**\n         * canvas context\n         * @type {CanvasContext}\n         * @private\n         */\n        this.canvasctx = null;\n\n        /**\n         * has the canvas context been overridden from the outside?\n         * @type {boolean}\n         * @private\n         */\n        this._canvasOverride = false;\n\n        /**\n         * width of component\n         * @type {int}\n         * @default 0\n         */\n        this.width = 0;\n\n        /**\n         * height of component\n         * @type {int}\n         * @default 0\n         */\n        this.height = 0;\n\n        /**\n         * left offset for letterbox of video\n         * @type {int}\n         * @default 0\n         */\n        this.letterBoxLeft = 0;\n\n        /**\n         * top offset for letterbox of video\n         * @type {int}\n         * @default 0\n         */\n        this.letterBoxTop = 0;\n\n        /**\n         * aspect ratio of video\n         * @type {number}\n         */\n        this.aspectRatio = 0;\n\n        /**\n         * render scale for canvas frame data\n         * best used when grabbing frame data at a different size than the shown video\n         * @attribute canvasScale\n         * @type {float}\n         * @default 1.0\n         */\n        this.canvasScale = 1.0;\n\n        /**\n         * visible area bounding box\n         * whether letterboxed or cropped, will report visible video area\n         * does not include positioning in element, so if letterboxing, x and y will be reported as 0\n         * @type {{x: number, y: number, width: number, height: number}}\n         */\n        this.visibleVideoRect = { x: 0, y: 0, width: 0, height: 0 }\n    }\n\n    /**\n     * on video playing handler\n     */\n    onPlaying() {\n        this.isPlaying = true;\n        var event = new CustomEvent('videoplaying', {\n            detail: {\n                source: this.source,\n                videoElement: this.videoElement,\n                videoWidth: this.videoScaledWidth,\n                videoHeight: this.videoScaledHeight,\n                width: this.width,\n                height: this.height } });\n        this.dispatchEvent(event);\n\n        this.canvasElement.width = this.videoScaledWidth * this.canvasScale;\n        this.canvasElement.height = this.videoScaledHeight * this.canvasScale;\n\n        var ctxstring = this._useWebGL ? 'webgl' : '2d';\n        if (!this._canvasOverride) {\n            this.canvasctx = this.canvasElement.getContext(ctxstring);\n        }\n    }\n\n    /**\n     * update canvas dimensions when resized\n     * @private\n     */\n    onResize() {\n        if (this.offsetWidth === 0 || this.offsetHeight === 0) {\n            return;\n        }\n        // set size properties based on component height\n        this.width = this.offsetWidth;\n        this.height = this.offsetHeight;\n\n        if (this.videoElement.videoWidth > 0 && this.videoElement.videoHeight > 0) {\n            this.aspectRatio = this.videoElement.videoWidth / this.videoElement.videoHeight;\n        }\n\n        this.videoScaledWidth = this.width;\n        this.videoScaledHeight = this.height;\n        var componentAspectRatio = this.width/this.height;\n\n        if (this.videoScaleMode === 'contain') {\n            // calculate letterbox borders\n            if (componentAspectRatio < this.aspectRatio) {\n                this.videoScaledHeight = this.width / this.aspectRatio;\n                this.letterBoxTop = this.height/2 - this.videoScaledHeight/2;\n                this.letterBoxLeft = 0;\n            } else if (componentAspectRatio > this.aspectRatio) {\n                this.videoScaledWidth = this.height * this.aspectRatio;\n                this.letterBoxLeft = this.width/2 - this.videoScaledWidth/2;\n                this.letterBoxTop = 0;\n            } else {\n                this.letterBoxTop = 0;\n                this.letterBoxLeft = 0;\n            }\n\n            this.visibleVideoRect.x = 0;\n            this.visibleVideoRect.y = 0;\n            this.visibleVideoRect.width = this.videoScaledWidth;\n            this.visibleVideoRect.height = this.videoScaledHeight;\n\n        } else if (this.videoScaleMode === 'cover') {\n            if (componentAspectRatio > this.aspectRatio) {\n                this.videoScaledWidth = this.width;\n                this.videoScaledHeight = this.width / this.aspectRatio;\n                this.letterBoxLeft = 0;\n                this.letterBoxTop = -(this.videoScaledHeight/2 - this.height/2);\n            } else {\n                this.videoScaledHeight = this.height;\n                this.videoScaledWidth = this.height * this.aspectRatio;\n                this.letterBoxTop = 0;\n                this.letterBoxLeft = -(this.videoScaledWidth/2 - this.width/2);\n            }\n\n            this.visibleVideoRect.x = -(this.letterBoxLeft);\n            this.visibleVideoRect.y = -(this.letterBoxTop);\n            this.visibleVideoRect.width = this.videoScaledWidth - (this.visibleVideoRect.x *2);\n            this.visibleVideoRect.height = this.videoScaledHeight - (this.visibleVideoRect.y *2);\n        }\n\n        // set video/canvas to component size\n        this.videoElement.setAttribute('width', this.videoScaledWidth);\n        this.videoElement.setAttribute('height', this.videoScaledHeight);\n        this.canvasElement.setAttribute('width', this.videoScaledWidth);\n        this.canvasElement.setAttribute('height', this.videoScaledHeight);\n        this.videoElement.style.top = this.letterBoxTop + 'px';\n        this.videoElement.style.left = this.letterBoxLeft + 'px';\n        this.canvasElement.style.top = this.letterBoxTop + 'px';\n        this.canvasElement.style.left = this.letterBoxLeft + 'px';\n    };\n\n    /**\n     * set video source\n     * @param {string | int} src video source uri\n     */\n    set source(src) {\n        if (!src) { return; }\n        this._source = src;\n\n        if (this._useCamera && this.cameraSources.length === 0) {\n            this.refreshCameraSources();\n            return;\n        }\n\n        if (this._useCamera || parseInt(src) === src) {\n            this.setCameraSourceByIndex(src);\n        } else if (this._useCamera) {\n            this.setCameraSourceByID(src);\n        } else {\n            this.videoElement.src = src;\n        }\n    };\n\n    /**\n     * get video source\n     * @return {string | int} src video source uri\n     */\n    get source() {\n        return this._source;\n    };\n\n    /**\n     * get canvas context for drawing into it\n     * @return {object} context canvas context\n     */\n    get canvasContext() {\n        return this.canvasctx;\n    };\n\n    /**\n     * get canvas context for drawing into it\n     * @param {object} context canvas context\n     */\n    set canvasContext(context) {\n        this.canvasctx = context;\n        this._canvasOverride = true;\n    };\n\n    /**\n     * get image data for current frame\n     * @param {boolean} mode data mode (binary or base64)\n     * @param {boolean} noredraw do not perform redraw (can be wasteful)\n     * @return {object} image data\n     */\n    getCurrentFrameData(mode, noredraw) {\n        var data, filtered;\n        if (!mode) {\n            mode = this.frameDataMode;\n        }\n        if (!noredraw) {\n            if (this._useWebGL) {\n                this.webglProperties.renderobj.textures.update('video');\n                this.webglProperties.renderHandler(this.webglProperties.renderobj);\n            } else {\n                this.canvasctx.drawImage(\n                    this.videoElement, 0, 0,\n                    this.videoScaledWidth * this.canvasScale,\n                    this.videoScaledHeight * this.canvasScale);\n\n                if (this.canvasFilter) {\n                    filtered = this.canvasctx.getImageData(\n                        this.visibleVideoRect.x * this.canvasScale,\n                        this.visibleVideoRect.y * this.canvasScale,\n                        this.visibleVideoRect.width * this.canvasScale,\n                        this.visibleVideoRect.height * this.canvasScale);\n                    this.canvasctx.putImageData(this.canvasFilter(filtered),\n                        0, 0, 0, 0,\n                        this.visibleVideoRect.width * this.canvasScale,\n                        this.visibleVideoRect.height * this.canvasScale );\n                }\n            }\n\n        }\n\n        switch (mode) {\n            /*case 'binary':\n                var base64Data = data.replace('data:image/png;base64', '');\n                var binaryData = new Buffer(base64Data, 'base64');\n                data = binaryData;\n                break;*/\n\n            case 'imagedataurl':\n                data = this.canvasElement.toDataURL('image/png');\n                break;\n\n            case 'imagedata':\n                if (!filtered) {\n                    data = this.canvasctx.getImageData(\n                        this.visibleVideoRect.x * this.canvasScale,\n                        this.visibleVideoRect.y * this.canvasScale,\n                        this.visibleVideoRect.width * this.canvasScale,\n                        this.visibleVideoRect.height * this.canvasScale);\n                } else {\n                    // save some CPU cycles if we already did this\n                    data = filtered;\n                }\n                break;\n        }\n\n        return data;\n    };\n\n    /**\n     * set camera source by index\n     * @param {int} index\n     */\n    setCameraSourceByIndex(index) {\n        if (!index || index >= this.cameraSources.length) { console.log(\"Video Source Index does not exist\"); return; }\n        this.setCameraSourceByID(this.cameraSources[index].id);\n    };\n\n    /**\n     * set camera source by id\n     * @param {String} id\n     */\n    setCameraSourceByID(id) {\n        navigator.webkitGetUserMedia(\n            { video: {optional: [{sourceId: id }]}},\n            this.onCameraStream.bind(this),\n            function() {}\n        );\n    };\n\n    /**\n     * refresh camera sources\n     */\n    refreshCameraSources() {\n        this.cameraSources = [];\n        MediaStreamTrack.getSources( sources => {\n            this.onCameraSources(sources);\n        });\n    };\n\n    /**\n     * on camera video source stream\n     * @param stream\n     * @private\n     */\n    onCameraStream(stream) {\n        this.videoElement.src = URL.createObjectURL(stream);\n        this.videoElement.onloadedmetadata = e => {\n            this.onResize();\n        };\n    };\n\n    /**\n     * on camera sources callback\n     * @param {array} sources found\n     * @private\n     */\n    onCameraSources(sources) {\n        var storageIndex = 0;\n        for (var i=0; i < sources.length; i++) {\n            if (sources[i].kind == 'video') {\n                var label = sources[i].label;\n                if (label == \"\") { label = \"video \" + Number(storageIndex+1); }\n                sources[storageIndex] = sources[i].id;\n                this.cameraSources.push({ label: label, id: sources[i].id });\n                storageIndex++;\n            }\n        }\n\n        var event = new CustomEvent('camerasfound', { detail: { cameras: this.cameraSources } });\n        this.dispatchEvent(event);\n        if (this._source) { this.source = this._source; }\n    };\n\n    /**\n     * parse attributes on element\n     * @private\n     */\n    parseAttributes() {\n        if (this.hasAttribute('useCamera') || this.hasAttribute('usecamera')) {\n            this._useCamera = true;\n        } else {\n            this._useCamera = false;\n        }\n\n        if (this.hasAttribute('src')) {\n            this._source = this.getAttribute('src');\n        }\n\n        if (this.hasAttribute('useCanvasForDisplay')) {\n            this.useCanvasForDisplay = true;\n        } else {\n            this.useCanvasForDisplay = false;\n        }\n\n        if (this.hasAttribute('frameDataMode')) {\n            this.frameDataMode = this.getAttribute('frameDataMode');\n        }\n\n        if (this.hasAttribute('canvasRefreshInterval')) {\n            this.canvasRefreshInterval = parseInt(this.getAttribute('canvasRefreshInterval'));\n        }\n\n        if (this.hasAttribute('canvasScale')) {\n            this.canvasScale = parseFloat(this.getAttribute('canvasScale'));\n        }\n\n        if (this.hasAttribute('videoScaleMode')) {\n            this.videoScaleMode = this.getAttribute('videoScaleMode');\n        }\n\n        if (this.canvasRefreshInterval === 0 && this.useCanvasForDisplay) {\n            console.log('Warning: Using canvas for display, but the canvas refresh interval is not set or set to 0. Setting refresh interval to 250ms.');\n            this.canvasRefreshInterval = 250;\n        }\n    };\n\n    /**\n     * element created callback\n     * @private\n     */\n    createdCallback() {\n        this.setProperties();\n        this.parseAttributes();\n    };\n\n    /**\n     * element attached callback\n     * @private\n     */\n    attachedCallback() {\n        let template = this.owner.querySelector(\"template\");\n        let clone = template.content.cloneNode(true);\n        this.root = this.createShadowRoot();\n        this.root.appendChild(clone);\n\n        window.addEventListener('HTMLImportsLoaded', e => { this.onResize(); });\n        window.addEventListener('resize', e => { this.onResize(); });\n\n        this.videoElement = this.root.querySelector('#vid');\n        this.videoElement.addEventListener('play', e => this.onPlaying(e));\n        this.canvasElement = this.root.querySelector('#canvas');\n\n        if (this._flipCanvas) {\n            this.canvasElement.style.transform = 'scale(1, -1)';\n        }\n        this.videoElement.onloadedmetadata = e => {\n            this.onResize();\n        };\n\n        this.source = this._source;\n        if (this.useCanvasForDisplay) {\n            this.videoElement.style.display = 'none';\n        } else {\n            this.canvasElement.style.display = 'none';\n        }\n\n        if (this.canvasRefreshInterval > 0) {\n            this.tick = setInterval(() => {\n                if (this.width === 0 || this.height === 0) { return; }\n                if (!this.isPlaying) { return; }\n                var event = new CustomEvent('frameupdate', { detail: {\n                    framedata: this.getCurrentFrameData(),\n                    canvascontext: this.canvasctx,\n                    visibleVideoRect: this.visibleVideoRect,\n                    videoWidth: this.videoScaledWidth * this.canvasScale,\n                    videoHeight: this.videoScaledHeight * this.canvasScale,\n                    videoLeft: this.letterBoxLeft * this.canvasScale,\n                    videoTop: this.letterBoxTop * this.canvasScale,\n                    width: this.width * this.canvasScale,\n                    height: this.height * this.canvasScale }});\n\n                this.dispatchEvent(event);\n            }, this.canvasRefreshInterval);\n        }\n\n        this.isReady = true;\n        var event = new CustomEvent('ready');\n        this.dispatchEvent(event);\n    };\n\n    /**\n     * element detached callback\n     * @private\n     */\n    detachedCallback() {};\n\n\n    /**\n     * attributeChangedCallback\n     * @private\n     * @param {String} attr attribute changed\n     * @param {*} oldVal old value\n     * @param {*} newVal new value\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {};\n}"]}