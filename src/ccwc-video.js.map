{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/ccwc-video.es6"],"names":[],"mappings":"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","file":"ccwc-video.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * CCWCVideo supports both video files and camera feeds\r\n * Blit your video to a canvas, get frame data, scale the frame/canvas output, and render video to an external canvas of your choosing\r\n */\r\nexport default class extends HTMLElement {\r\n\r\n    /**\r\n     * initialize default class properties\r\n     * @private\r\n     */\r\n    setProperties() {\r\n        /**\r\n         * video source file or stream\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._source = '';\r\n\r\n        /**\r\n         * use webgl\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        //this._useWebGL = false;\r\n\r\n        /**\r\n         * use camera\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._useCamera = false;\r\n\r\n        /**\r\n         * is component ready\r\n         * @type {boolean}\r\n         */\r\n        this.isReady = false;\r\n\r\n        /**\r\n         * is video playing\r\n         * @type {boolean}\r\n         */\r\n        this.isPlaying = false;\r\n\r\n        /**\r\n         * width of scaled video\r\n         * @type {int}\r\n         */\r\n        this.videoScaledWidth = 0;\r\n\r\n        /**\r\n         * width of scaled video\r\n         * @type {int}\r\n         */\r\n        this.videoScaledWidth = 0;\r\n\r\n        /**\r\n         * height of scaled video\r\n         * @type {int}\r\n         */\r\n        this.videoScaledHeight = 0;\r\n\r\n        /**\r\n         * what type of data comes back with frame data event\r\n         * @type {string}\r\n         * @default imagedataurl\r\n         */\r\n        this.frameDataMode = 'none';\r\n\r\n        /**\r\n         * determines whether to use the canvas element for display instead of the video element\r\n         * @type {boolean}\r\n         * @default false\r\n         */\r\n        this.useCanvasForDisplay = false;\r\n\r\n        /**\r\n         * canvas filter function (manipulate pixels)\r\n         * @type {method}\r\n         * @default 0 ms\r\n         */\r\n        this.canvasFilter = null;\r\n\r\n        /**\r\n         * When the texture read (_glReadFlipCorrection) is true, this makes the display go upside down, correct the canvas by inverse scaling in the vertical\r\n         * @type {Boolean}\r\n         * @default false\r\n         */\r\n        //this._flipCanvas = false;\r\n\r\n        /**\r\n         * refresh interval when using the canvas for display\r\n         * @type {int}\r\n         * @default 0 ms\r\n         */\r\n        this.canvasRefreshInterval = 0;\r\n\r\n        /**\r\n         * video element\r\n         * @type {HTMLElement}\r\n         * @private\r\n         */\r\n        this.videoElement = null;\r\n\r\n        /**\r\n         * camera sources list\r\n         * @type {Array}\r\n         */\r\n        this.cameraSources = [];\r\n\r\n        /**\r\n         * canvas element\r\n         * @type {Canvas}\r\n         * @private\r\n         */\r\n        this.canvasElement = null;\r\n\r\n        /**\r\n         * component shadow root\r\n         * @type {ShadowRoot}\r\n         * @private\r\n         */\r\n        this.root = null;\r\n\r\n        /**\r\n         * interval timer to draw frame redraws\r\n         * @type {int}\r\n         * @private\r\n         */\r\n        this.tick = null;\r\n\r\n        /**\r\n         * canvas context\r\n         * @type {CanvasContext}\r\n         * @private\r\n         */\r\n        this.canvasctx = null;\r\n\r\n        /**\r\n         * has the canvas context been overridden from the outside?\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._canvasOverride = false;\r\n\r\n        /**\r\n         * width of component\r\n         * @type {int}\r\n         * @default 0\r\n         */\r\n        this.width = 0;\r\n\r\n        /**\r\n         * height of component\r\n         * @type {int}\r\n         * @default 0\r\n         */\r\n        this.height = 0;\r\n\r\n        /**\r\n         * left offset for letterbox of video\r\n         * @type {int}\r\n         * @default 0\r\n         */\r\n        this.letterBoxLeft = 0;\r\n\r\n        /**\r\n         * top offset for letterbox of video\r\n         * @type {int}\r\n         * @default 0\r\n         */\r\n        this.letterBoxTop = 0;\r\n\r\n        /**\r\n         * aspect ratio of video\r\n         * @type {number}\r\n         */\r\n        this.aspectRatio = 0;\r\n\r\n        /**\r\n         * render scale for canvas frame data\r\n         * best used when grabbing frame data at a different size than the shown video\r\n         * @attribute canvasScale\r\n         * @type {float}\r\n         * @default 1.0\r\n         */\r\n        this.canvasScale = 1.0;\r\n    }\r\n\r\n    /**\r\n     * on video playing handler\r\n     */\r\n    onPlaying() {\r\n        this.isPlaying = true;\r\n        var event = new CustomEvent('videoplaying', {\r\n            detail: {\r\n                source: this.source,\r\n                videoElement: this.videoElement,\r\n                videoWidth: this.videoScaledWidth,\r\n                videoHeight: this.videoScaledHeight,\r\n                width: this.width,\r\n                height: this.height } });\r\n        this.dispatchEvent(event);\r\n\r\n        this.canvasElement.width = this.videoScaledWidth * this.canvasScale;\r\n        this.canvasElement.height = this.videoScaledHeight * this.canvasScale;\r\n\r\n        var ctxstring = this._useWebGL ? 'webgl' : '2d';\r\n        if (!this._canvasOverride) {\r\n            this.canvasctx = this.canvasElement.getContext(ctxstring);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update canvas dimensions when resized\r\n     * @private\r\n     */\r\n    onResize() {\r\n        // set size properties based on component height\r\n        this.width = this.offsetWidth;\r\n        this.height = this.offsetHeight;\r\n\r\n        // calculate aspect ratio\r\n        this.aspectRatio = this.videoElement.videoWidth / this.videoElement.videoHeight;\r\n        this.videoScaledWidth = this.width;\r\n        this.videoScaledHeight = this.height;\r\n\r\n        // calculate letterbox borders\r\n        var componentAspectRatio = this.width/this.height;\r\n        if (componentAspectRatio < this.aspectRatio) {\r\n            this.videoScaledHeight = this.width / this.aspectRatio;\r\n            this.letterBoxTop = this.height/2 - this.videoScaledHeight/2;\r\n            this.letterBoxLeft = 0;\r\n        } else if (componentAspectRatio > this.aspectRatio) {\r\n            this.videoScaledWidth = this.height * this.aspectRatio;\r\n            this.letterBoxLeft = this.width/2 - this.videoScaledWidth/2;\r\n            this.letterBoxTop = 0;\r\n        } else {\r\n            this.letterBoxTop = 0;\r\n            this.letterBoxLeft = 0;\r\n        }\r\n\r\n        // set video/canvas to component size\r\n        this.videoElement.setAttribute('width', this.videoScaledWidth);\r\n        this.videoElement.setAttribute('height', this.videoScaledHeight);\r\n        this.canvasElement.setAttribute('width', this.videoScaledWidth);\r\n        this.canvasElement.setAttribute('height', this.videoScaledHeight);\r\n        this.videoElement.style.top = this.letterBoxTop + 'px';\r\n        this.videoElement.style.left = this.letterBoxLeft + 'px';\r\n        this.canvasElement.style.top = this.letterBoxTop + 'px';\r\n        this.canvasElement.style.left = this.letterBoxLeft + 'px';\r\n    };\r\n\r\n\r\n    /**\r\n     * set video source\r\n     * @param {string | int} src video source uri\r\n     */\r\n    set source(src) {\r\n        if (!src) { return; }\r\n        this._source = src;\r\n\r\n        if (this._useCamera && this.cameraSources.length === 0) {\r\n            this.refreshCameraSources();\r\n            return;\r\n        }\r\n\r\n        if (this._useCamera || parseInt(src) === src) {\r\n            this.setCameraSourceByIndex(src);\r\n        } else if (this._useCamera) {\r\n            this.setCameraSourceByID(src);\r\n        } else {\r\n            this.videoElement.src = src;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * get video source\r\n     * @return {string | int} src video source uri\r\n     */\r\n    get source() {\r\n        return this._source;\r\n    };\r\n\r\n    /**\r\n     * get canvas context for drawing into it\r\n     * @return {object} context canvas context\r\n     */\r\n    get canvasContext() {\r\n        return this.canvasctx;\r\n    };\r\n\r\n    /**\r\n     * get canvas context for drawing into it\r\n     * @param {object} context canvas context\r\n     */\r\n    set canvasContext(context) {\r\n        this.canvasctx = context;\r\n        this._canvasOverride = true;\r\n    };\r\n\r\n    /**\r\n     * get image data for current frame\r\n     * @param {boolean} mode data mode (binary or base64)\r\n     * @param {boolean} noredraw do not perform redraw (can be wasteful)\r\n     * @return {object} image data\r\n     */\r\n    getCurrentFrameData(mode, noredraw) {\r\n        var data, filtered;\r\n        if (!mode) {\r\n            mode = this.frameDataMode;\r\n        }\r\n        if (!noredraw) {\r\n            if (this._useWebGL) {\r\n                this.webglProperties.renderobj.textures.update('video');\r\n                this.webglProperties.renderHandler(this.webglProperties.renderobj);\r\n            } else {\r\n                this.canvasctx.drawImage(\r\n                    this.videoElement, 0, 0,\r\n                    this.videoScaledWidth * this.canvasScale,\r\n                    this.videoScaledHeight * this.canvasScale);\r\n\r\n                if (this.canvasFilter) {\r\n                    filtered = this.canvasctx.getImageData(0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale);\r\n                    this.canvasctx.putImageData(this.canvasFilter(filtered), 0, 0, 0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale );\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        switch (mode) {\r\n            /*case 'binary':\r\n                var base64Data = data.replace('data:image/png;base64', '');\r\n                var binaryData = new Buffer(base64Data, 'base64');\r\n                data = binaryData;\r\n                break;*/\r\n\r\n            case 'imagedataurl':\r\n                data = this.canvasElement.toDataURL('image/png');\r\n                break;\r\n\r\n            case 'imagedata':\r\n                if (!filtered) {\r\n                    //if (this._useWebGL) {\r\n                      //  data = ccwc.image.webgl.filter.getCanvasPixels(this.webglProperties.renderobj);\r\n                    //} else {\r\n                        data = this.canvasctx.getImageData(0, 0, this.videoScaledWidth * this.canvasScale, this.videoScaledHeight * this.canvasScale);\r\n                    //}\r\n                } else {\r\n                    // save some CPU cycles if we already did this\r\n                    data = filtered;\r\n                }\r\n                break;\r\n        }\r\n\r\n        return data;\r\n    };\r\n\r\n    /**\r\n     * set camera source by index\r\n     * @param {int} index\r\n     */\r\n    setCameraSourceByIndex(index) {\r\n        if (!index || index >= this.cameraSources.length) { console.log(\"Video Source Index does not exist\"); return; }\r\n        this.setCameraSourceByID(this.cameraSources[index].id);\r\n    };\r\n\r\n    /**\r\n     * set camera source by id\r\n     * @param {String} id\r\n     */\r\n    setCameraSourceByID(id) {\r\n        navigator.webkitGetUserMedia(\r\n            { video: {optional: [{sourceId: id }]}},\r\n            this.onCameraStream.bind(this),\r\n            function() {}\r\n        );\r\n    };\r\n\r\n    /**\r\n     * refresh camera sources\r\n     */\r\n    refreshCameraSources() {\r\n        this.cameraSources = [];\r\n        MediaStreamTrack.getSources( sources => {\r\n            this.onCameraSources(sources);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * on camera video source stream\r\n     * @param stream\r\n     * @private\r\n     */\r\n    onCameraStream(stream) {\r\n        this.videoElement.src = URL.createObjectURL(stream);\r\n        this.videoElement.onloadedmetadata = e => {\r\n            this.onResize();\r\n        };\r\n    };\r\n\r\n    /**\r\n     * on camera sources callback\r\n     * @param {array} sources found\r\n     * @private\r\n     */\r\n    onCameraSources(sources) {\r\n        var storageIndex = 0;\r\n        for (var i=0; i < sources.length; i++) {\r\n            if (sources[i].kind == 'video') {\r\n                var label = sources[i].label;\r\n                if (label == \"\") { label = \"video \" + Number(storageIndex+1); }\r\n                sources[storageIndex] = sources[i].id;\r\n                this.cameraSources.push({ label: label, id: sources[i].id });\r\n                storageIndex++;\r\n            }\r\n        }\r\n\r\n        var event = new CustomEvent('camerasfound', { detail: { cameras: this.cameraSources } });\r\n        this.dispatchEvent(event);\r\n        if (this._source) { this.source = this._source; }\r\n    };\r\n\r\n    /**\r\n     * parse attributes on element\r\n     * @private\r\n     */\r\n    parseAttributes() {\r\n        if (this.hasAttribute('useCamera') || this.hasAttribute('usecamera')) {\r\n            this._useCamera = true;\r\n        } else {\r\n            this._useCamera = false;\r\n        }\r\n\r\n        if (this.hasAttribute('src')) {\r\n            this._source = this.getAttribute('src');\r\n        }\r\n\r\n        if (this.hasAttribute('useCanvasForDisplay')) {\r\n            this.useCanvasForDisplay = true;\r\n        } else {\r\n            this.useCanvasForDisplay = false;\r\n        }\r\n\r\n        if (this.hasAttribute('frameDataMode')) {\r\n            this.frameDataMode = this.getAttribute('frameDataMode');\r\n        }\r\n\r\n        if (this.hasAttribute('canvasRefreshInterval')) {\r\n            this.canvasRefreshInterval = parseInt(this.getAttribute('canvasRefreshInterval'));\r\n        }\r\n\r\n        if (this.hasAttribute('canvasScale')) {\r\n            this.canvasScale = parseFloat(this.getAttribute('canvasScale'));\r\n        }\r\n\r\n        if (this.canvasRefreshInterval === 0 && this.useCanvasForDisplay) {\r\n            console.log('Warning: Using canvas for display, but the canvas refresh interval is not set or set to 0. Setting refresh interval to 250ms.');\r\n            this.canvasRefreshInterval = 250;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * element created callback\r\n     * @private\r\n     */\r\n    createdCallback() {\r\n        this.setProperties();\r\n        this.parseAttributes();\r\n    };\r\n\r\n    /**\r\n     * element attached callback\r\n     * @private\r\n     */\r\n    attachedCallback() {\r\n        let template = this.owner.querySelector(\"template\");\r\n        let clone = template.content.cloneNode(true);\r\n        this.root = this.createShadowRoot();\r\n        this.root.appendChild(clone);\r\n\r\n        window.addEventListener('HTMLImportsLoaded', e => {\r\n            this.onResize();\r\n        });\r\n\r\n        this.videoElement = this.root.querySelector('#vid');\r\n        this.videoElement.addEventListener('play', e => this.onPlaying(e));\r\n        this.canvasElement = this.root.querySelector('#canvas');\r\n\r\n        if (this._flipCanvas) {\r\n            this.canvasElement.style.transform = 'scale(1, -1)';\r\n        }\r\n        this.videoElement.onloadedmetadata = e => {\r\n            this.onResize();\r\n        };\r\n\r\n        this.source = this._source;\r\n        if (this.useCanvasForDisplay) {\r\n            this.videoElement.style.display = 'none';\r\n        } else {\r\n            this.canvasElement.style.display = 'none';\r\n        }\r\n\r\n        if (this.canvasRefreshInterval > 0) {\r\n            this.tick = setInterval(() => {\r\n                if (this.width === 0 || this.height === 0) { return; }\r\n                if (!this.isPlaying) { return; }\r\n                var event = new CustomEvent('frameupdate', { detail: {\r\n                    framedata: this.getCurrentFrameData(),\r\n                    canvascontext: this.canvasctx,\r\n                    videoWidth: this.videoScaledWidth * this.canvasScale,\r\n                    videoHeight: this.videoScaledHeight * this.canvasScale,\r\n                    videoLeft: this.letterBoxLeft * this.canvasScale,\r\n                    videoTop: this.letterBoxTop * this.canvasScale,\r\n                    width: this.width * this.canvasScale,\r\n                    height: this.height * this.canvasScale }});\r\n\r\n                this.dispatchEvent(event);\r\n            }, this.canvasRefreshInterval);\r\n        }\r\n\r\n        this.isReady = true;\r\n        var event = new CustomEvent('ready');\r\n        this.dispatchEvent(event);\r\n    };\r\n\r\n    /**\r\n     * element detached callback\r\n     * @private\r\n     */\r\n    detachedCallback() {};\r\n\r\n\r\n    /**\r\n     * attributeChangedCallback\r\n     * @private\r\n     * @param {String} attr attribute changed\r\n     * @param {*} oldVal old value\r\n     * @param {*} newVal new value\r\n     */\r\n    attributeChangedCallback(attr, oldVal, newVal) {};\r\n}"]}